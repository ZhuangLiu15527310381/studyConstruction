package com.example.demo.design.abstractFactory;

import com.example.demo.design.abstractFactory.model.Pizza;

/**
 *  抽象工厂模式同工厂方法模式一样，也是由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成，但抽象工厂中方法个数不同，抽象产品的个数也不同。
 *  抽象工程的角色：
 *      1.抽象工厂：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。
 *      2.具体工厂： 主要实现抽象工厂中的多个抽象方法，完成具体产品的创建；
 *      3.抽象产品：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。
 *      4.具体产品：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系；
 *
 *   抽象工厂的优点：
 *      1.可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类进行管理；
 *      2.当增加一个新的产品族时，只需要扩展一个工厂类就可以。
 *      3.屏蔽产品的具体实现，调用者只用关系产品的接口
 *    缺点：
 *      1.当产品族中需要增加一个新的产品时，都需要增加一个具体类和对象实现工厂
 *      2.工厂类会增加对象创建的复杂度，不利于后期维护
 *
 *    应用场景：
 *      1.数据库访问，可以根据数据类型进行创建连接池；
 *      2.设计一个连接服务器的框架，需要使用“POP3”、“IMAP”、“HTTP”三种协议，可以把这三个作为产品类，共同实现一个接口；
 */




//一个抽象工厂模式的抽象层
public interface AbsFactory {

    public Pizza createPizza(String orderType);

}
